<%=
  def parse_ip (ip, var_name)
    unless ip.empty?
      ip = ip.split(":")[0]
	begin
	  parsed = IPAddr.new ip
	rescue  => e
	  raise "Invalid #{var_name} '#{ip}': #{e}"
	end
    end
  end

  def parse_ips(ips, var_name)
    ips.each do |ip|
      parse_ip(ip, var_name)
    end
  end

  def gateway_for(subnet)
    begin
      network = IPAddr.new subnet
      if network.prefix < 1 || network.prefix > 30
	raise 'subnet_range prefix length must be between 1 and 30'
      end

      gateway = network.to_range.to_a[1].to_s #grab first usable IP in the subnet
      if_p('winc_network.gateway_address') do |gw|
	 parse_ip(p('winc_network.gateway_address'), 'winc_network.gateway_address')
	gateway = gw
      end
    rescue => e
      raise "Invalid 'winc_network.subnet_range': #{e}"
    end
    if ! network.include?(gateway)
      raise "Invalid 'winc_network.gateway_address': #{gateway} is outside the #{network}/#{network.prefix} subnet range"
    end
    gateway
  end

  def dns_for(supplied, gateway)
    unless supplied.empty?
      return supplied
    end
    # intentional coercion into array
    [ gateway ]
  end


  parse_ips(p('winc_network.dns_servers'), 'winc_network.dns_servers')
  gateway = gateway_for(p('winc_network.subnet_range'))
  dns = dns_for(p('winc_network.dns_servers'), gateway)

  toRender = {
    "mtu" => p("winc_network.mtu"),
    "network_name" => "winc-nat",
    "subnet_range" => p("winc_network.subnet_range"),
    "gateway_address" => gateway,
    "dns_servers" => dns,
    "maximum_outgoing_bandwidth" => p("winc_network.maximum_outgoing_bandwidth"),
    "search_domains" => p("winc_network.search_domains"),
    "allow_outbound_traffic_by_default" => p("winc_network.allow_outbound_traffic_by_default"),
    "wait_timeout_in_seconds" => p("winc_network.wait_timeout_in_seconds"),
  }

  JSON.pretty_generate(toRender)
%>
