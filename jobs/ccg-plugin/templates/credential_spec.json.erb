<% if p('ccg.enabled') %>
<%
def validate_presence_or_raise(property)
  if_p(property) do
    return p(property)
  end.else do
    raise "#{property} is required when ccg.enabled is true"
  end
end

# Example of valid structure
# {
#     "CmsPlugins": [
#         "ActiveDirectory"
#     ],
#     "DomainJoinConfig": {
#         "Sid": "S-1-5-21-702590844-1001920913-2680819671",
#         "MachineAccountName": "webapp01",
#         "Guid": "56d9b66c-d746-4f87-bd26-26760cfdca2e",
#         "DnsTreeName": "contoso.com",
#         "DnsName": "contoso.com",
#         "NetBiosName": "CONTOSO"
#     },
#     "ActiveDirectoryConfig": {
#         "GroupManagedServiceAccounts": [
#             {
#                 "Name": "webapp01",
#                 "Scope": "contoso.com"
#             },
#             {
#                 "Name": "webapp01",
#                 "Scope": "CONTOSO"
#             }
#         ]
#     }
# }
def validate_credential_spec_structure(config)
  cms_plugins = config['CmsPlugins']
  raise 'ccg.credential_spec must contain element "CmsPlugins"' if cms_plugins.nil?
  raise 'ccg.credential_spec.CmsPlugins must be an array with a single element "ActiveDirectory"' if cms_plugins != ['ActiveDirectory']

  domain_join_config = config['DomainJoinConfig']
  raise 'ccg.credential_spec must contain element "DomainJoinConfig"' if domain_join_config.nil?
  ['Sid', 'MachineAccountName', 'Guid', 'DnsTreeName', 'DnsName', 'NetBiosName'].each do |property|
    raise "ccg.credential_spec.DomainJoinConfig must contain element \"#{property}\"" if domain_join_config[property].nil?
  end

  active_directory_config = config['ActiveDirectoryConfig']
  raise 'ccg.credential_spec must contain element "ActiveDirectoryConfig"' if active_directory_config.nil?

  group_managed_service_accounts = active_directory_config['GroupManagedServiceAccounts']
  raise 'ccg.credential_spec.ActiveDirectoryConfig must contain element "GroupManagedServiceAccounts"' if group_managed_service_accounts.nil?
  raise 'ccg.credential_spec.ActiveDirectoryConfig.GroupManagedServiceAccounts must be an array of objects with keys "Name" and "Scope"' unless group_managed_service_accounts.is_a?(Array)
  raise 'ccg.credential_spec.ActiveDirectoryConfig.GroupManagedServiceAccounts must be an array of objects with keys "Name" and "Scope"' unless group_managed_service_accounts.all? do |e|
    e.is_a?(Hash) && e.keys.sort == ['Name', 'Scope']
  end
end

def validate_plugin_guid(guid)
  raise 'ccg.plugin_guid must be a Microsoft GUID enclosed by curly braces' unless guid.start_with?('{') && guid.end_with?('}') && guid.length == 38
end
%>
<%=
  require 'json'

  plugin_guid = validate_presence_or_raise('ccg.plugin_guid')
  validate_plugin_guid(plugin_guid)
  plugin_input = validate_presence_or_raise('ccg.plugin_input')
  credential_spec = validate_presence_or_raise('ccg.credential_spec')

  begin
    parsed_credential_spec = JSON.parse(credential_spec)
  rescue => e
    raise "ccg.credential_spec must be valid json: #{e}"
  end

  validate_credential_spec_structure(parsed_credential_spec)

  parsed_credential_spec['ActiveDirectoryConfig'].merge!({
    'HostAccountConfig' => {
      'PortableCcgVersion' => '1',
      'PluginGUID' => plugin_guid,
      'PluginInput' => plugin_input
    }
  })

  JSON.pretty_generate(parsed_credential_spec)
%>
<% end %>
