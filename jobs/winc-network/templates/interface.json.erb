<%=
  def parse_ip (ip, var_name)
    unless ip.empty?
      ip = ip.split(":")[0]
	begin
	  parsed = IPAddr.new ip
	rescue  => e
	  raise "Invalid #{var_name} '#{ip}': #{e}"
	end
    end
  end

  def parse_ips(ips, var_name)
    ips.each do |ip|
      parse_ip(ip, var_name)
    end
  end

  def gateway_for(subnet)
    begin
      network = IPAddr.new subnet
      if network.prefix < 1 || network.prefix > 30
	raise 'subnet_range prefix length must be between 1 and 30'
      end
      network.to_range.to_a[1].to_s #grab first non-network IP in the subnet
    rescue => e
      raise "Invalid 'winc_network.subnet_range': #{e}"
    end
  end

  parse_ips(p('winc_network.dns_servers'), 'winc_network.dns_servers')
  gateway = gateway_for(p('winc_network.subnet_range'))

  toRender = {
    "mtu" => p("winc_network.mtu"),
    "network_name" => "winc-nat",
    "subnet_range" => p('winc_network.subnet_range'),
    "gateway_address" => gateway,
    "dns_servers" => p("winc_network.dns_servers"),
    "maximum_outgoing_bandwidth" => p("winc_network.maximum_outgoing_bandwidth"),
  }

  JSON.pretty_generate(toRender)
%>
